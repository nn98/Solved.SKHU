generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model algorithm {
  algorithm_id          String                  @id @unique(map: "ID_UNIQUE") @db.VarChar(40)
  namekr                String?                 @db.VarChar(100)
  problem_has_algorithm problem_has_algorithm[]
}

model assignment_result {
  assignment_result_id Int
  result               Json?
  lecture_id           Int
  deadline             BigInt

  @@id([assignment_result_id, lecture_id, deadline])
}

model emoji {
  emoji_id Int     @id @default(autoincrement())
  value    String? @db.MediumText
}

model learn {
  student_id Int
  lecture_id Int
  lecture    lecture @relation(fields: [lecture_id], references: [lecture_id], onDelete: Cascade, onUpdate: NoAction, map: "Learn_ibfk_1")
  student    student @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Student_has_Lecture_Student1")

  @@id([student_id, lecture_id])
  @@index([lecture_id], map: "fk_Student_has_Lecture_Lecture1_idx")
  @@index([student_id], map: "fk_Student_has_Lecture_Student1_idx")
}

model lecture {
  lecture_id   Int     @id @default(autoincrement())
  professor    String? @db.VarChar(45)
  code         String? @db.VarChar(45)
  name         String? @db.VarChar(45)
  distribution Int?
  learn        learn[]
}

model problem {
  problem_id                                   Int                     @id @unique(map: "ID_UNIQUE") @default(autoincrement())
  namekr                                       String?                 @db.VarChar(1000)
  nameen                                       String?                 @db.VarChar(1000)
  rate                                         String?                 @db.VarChar(45)
  solved_rank                                  Int
  solved_rank_problem_solved_rankTosolved_rank solved_rank             @relation("problem_solved_rankTosolved_rank", fields: [solved_rank], references: [solved_rank_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_PROBLEM_SOLVED_RANK1")
  problem_has_algorithm                        problem_has_algorithm[]
  solve                                        solve[]

  @@index([solved_rank], map: "fk_PROBLEM_SOLVED_RANK1_idx")
}

model problem_has_algorithm {
  problem_id   Int
  algorithm_id String    @db.VarChar(100)
  algorithm    algorithm @relation(fields: [algorithm_id], references: [algorithm_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_PROBLEM_has_Algorithm_Algorithm1")
  problem      problem   @relation(fields: [problem_id], references: [problem_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_PROBLEM_has_Algorithm_PROBLEM1")

  @@id([problem_id, algorithm_id])
  @@index([algorithm_id], map: "fk_PROBLEM_has_Algorithm_Algorithm1_idx")
  @@index([problem_id], map: "fk_PROBLEM_has_Algorithm_PROBLEM1_idx")
}

model qna_answer {
  qna_answer_id   Int          @id @default(autoincrement())
  createdat       DateTime     @default(now())
  content         String?      @db.LongText
  user_ip         String       @db.VarChar(200)
  user_id         String       @db.VarChar(200)
  qna_question_id Int
  qna_user        qna_user     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "Qnainner_ibfk_1")
  qna_question    qna_question @relation(fields: [qna_question_id], references: [qna_question_id], onDelete: Cascade, map: "Qnainner_ibfk_2")

  @@index([user_id], map: "USER_ID")
  @@index([qna_question_id], map: "qnaId")
}

model qna_question {
  qna_question_id Int          @id @default(autoincrement())
  createdat       DateTime     @default(now())
  content         String?      @db.LongText
  user_ip         String       @db.VarChar(200)
  user_id         String       @db.VarChar(200)
  problem_id      String       @db.VarChar(200)
  qna_answer      qna_answer[]
  qna_user        qna_user     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "Qna_ibfk_1")

  @@index([user_id], map: "USER_ID")
}

model qna_user {
  user_id       String         @id @unique(map: "Qnauser.name_unique") @db.VarChar(200)
  user_password String         @db.VarChar(200)
  qna_answer    qna_answer[]
  qna_question  qna_question[]
}

model ranking {
  user_id    String  @id @unique(map: "User_ID_UNIQUE") @db.VarChar(20)
  worldrank  String? @db.VarChar(200)
  skhurank   Int?    @db.UnsignedInt
  tier       String? @db.VarChar(45)
  rating     Int?    @db.UnsignedInt
  class      String? @db.VarChar(45)
  pro        String? @db.VarChar(45)
  correction String? @db.VarChar(45)
  user       user    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Ranking_User1")

  @@index([user_id], map: "fk_Ranking_User1_idx")
}

model solve {
  user_id    String  @db.VarChar(20)
  problem_id Int
  date       String? @db.VarChar(50)
  user       user    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "Solve_ibfk_1")
  problem    problem @relation(fields: [problem_id], references: [problem_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_USER_has_PROBLEM_PROBLEM1")

  @@id([problem_id, user_id])
  @@index([problem_id], map: "fk_USER_has_PROBLEM_PROBLEM1_idx")
  @@index([user_id], map: "fk_USER_has_PROBLEM_USER1_idx")
}

model solved_rank {
  solved_rank_id                           Int       @id @default(autoincrement())
  tier                                     String?   @db.VarChar(25)
  problem_problem_solved_rankTosolved_rank problem[] @relation("problem_solved_rankTosolved_rank")
  user_user_solved_rankTosolved_rank       user[]    @relation("user_solved_rankTosolved_rank")
}

model student {
  student_id Int     @id
  name       String? @db.VarChar(45)
  bojid      String? @db.VarChar(45)
  learn      learn[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model student_backup {
  student_id Int
  name       String? @db.VarChar(45)
  bojid      String? @db.VarChar(45)

  @@ignore
}

model user {
  user_id                                   String       @unique(map: "ID_UNIQUE") @db.VarChar(20)
  problems                                  Int
  solved_rank                               Int?
  worldrank                                 String?      @db.VarChar(100)
  skhurank                                  Int?         @db.UnsignedInt
  rating                                    Int?         @db.UnsignedInt
  class                                     String?      @db.VarChar(45)
  correction                                String?      @db.VarChar(45)
  git_id                                    String?      @db.VarChar(45)
  ranking                                   ranking?
  solve                                     solve[]
  solved_rank_user_solved_rankTosolved_rank solved_rank? @relation("user_solved_rankTosolved_rank", fields: [solved_rank], references: [solved_rank_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_USER_SOLVED.AC_RANK")

  @@index([solved_rank], map: "fk_USER_SOLVED.AC_RANK_idx")
}
